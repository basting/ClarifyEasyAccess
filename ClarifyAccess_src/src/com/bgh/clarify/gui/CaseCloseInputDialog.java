/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bgh.clarify.gui;

import com.bgh.clarify.db.ClarifyDatabaseQueryHelper;
import com.bgh.clarify.dt.CaseCloseDt;
import com.bgh.clarify.gui.util.CaseCloseTableModel;
import com.bgh.clarify.gui.util.DateCellEditor;
import com.bgh.clarify.gui.util.DateCellRenderer;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author BASTING
 */
public class CaseCloseInputDialog extends javax.swing.JDialog {

    private ArrayList<CaseCloseDt> eligibleIncidentCases;

    private MainFrame parentFrame;
    
    private ClarifyDatabaseQueryHelper queryhelper;
    
    private final int CASE_CLOSE_COLUMNS_COUNT = 7;
    
    private final static String EMPTY_STR = "";
    
    private ArrayList<CaseCloseDt> getEligibleIncidentCases() {
        return eligibleIncidentCases;
    }

    private void setEligibleIncidentCases(ArrayList<CaseCloseDt> eligibleIncidentCases) {
        this.eligibleIncidentCases = eligibleIncidentCases;
    }
    
    /**
     * Creates new form CaseCloseInputDialog
     */
    public CaseCloseInputDialog(java.awt.Frame parent, boolean modal,ArrayList<CaseCloseDt> eligibleIncidentCases,ClarifyDatabaseQueryHelper queryhelperInput) {
        super(parent, modal);
        parentFrame = (MainFrame)parent;
        initComponents();
        initCustomComponents();
        setEligibleIncidentCases(eligibleIncidentCases);
        this.queryhelper = queryhelperInput;
        loadCaseDataForClosure();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnSaveData = new javax.swing.JButton();
        btnSaveDataCloseCase = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtTotalCount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        chkAutoUpdateImpactStart = new javax.swing.JCheckBox();
        chkAutoUpdateImpactEnd = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCaseCloseInput = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Case closure - Mandatory Input for Incidents");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlMain.setLayout(new java.awt.BorderLayout());

        btnSaveData.setText("Just Save Data");
        btnSaveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDataActionPerformed(evt);
            }
        });

        btnSaveDataCloseCase.setText("Save Data and Close Case");
        btnSaveDataCloseCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDataCloseCaseActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel and Return");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setText("Total Count:");

        chkAutoUpdateImpactStart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkAutoUpdateImpactStart.setForeground(new java.awt.Color(51, 51, 255));
        chkAutoUpdateImpactStart.setText("Update Impact Start Time same as Creation Time");
        chkAutoUpdateImpactStart.setToolTipText("Check this if you want to update Impact Start Time same as Creation Time of the case");
        chkAutoUpdateImpactStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAutoUpdateImpactStartActionPerformed(evt);
            }
        });

        chkAutoUpdateImpactEnd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkAutoUpdateImpactEnd.setForeground(new java.awt.Color(51, 51, 255));
        chkAutoUpdateImpactEnd.setText("Update Impact End Time same as Current Time");
        chkAutoUpdateImpactEnd.setToolTipText("Check this if you want to update Impact End Time same as Current time");
        chkAutoUpdateImpactEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAutoUpdateImpactEndActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkAutoUpdateImpactStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkAutoUpdateImpactEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSaveData, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveDataCloseCase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonsLayout.createSequentialGroup()
                        .addGap(0, 23, Short.MAX_VALUE)
                        .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancel)
                            .addComponent(btnSaveDataCloseCase)
                            .addComponent(btnSaveData)
                            .addComponent(txtTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(pnlButtonsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkAutoUpdateImpactStart, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkAutoUpdateImpactEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pnlMain.add(pnlButtons, java.awt.BorderLayout.SOUTH);

        tblCaseCloseInput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Case Id", "Title", "Creation Time", "Impact Start Time", "Impact End Time", "Business Impact", "Restoration Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCaseCloseInput.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblCaseCloseInput);

        pnlMain.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1049)/2, (screenSize.height-553)/2, 1049, 553);
    }// </editor-fold>//GEN-END:initComponents

    private boolean isDefaultDate(Date inputDate){
      SimpleDateFormat dtFormatLocal = new SimpleDateFormat("MM/dd/yyyy");
      Date date = null;
        try {
            date = dtFormatLocal.parse("1/1/1753");
        } catch (ParseException ex) {
            Logger.getLogger(DateCellEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
      
        if(date == null || inputDate == null){
            return false;
        }
        
        if(inputDate.equals(date)){
            return true;
        }
        
      return false;
  }
    
    private boolean performDataMandatoryCheck(Vector<Object> caseCloseDataVector) {
        int size = caseCloseDataVector.size();
        
        for (int i = 0; i < size; i++) {
            Vector currRow = (Vector)caseCloseDataVector.get(i);
            
            Date impactStartTime = (Date)currRow.get(3); // 
            Date impactEndTime = (Date)currRow.get(4);
            String businessImpact = (String)currRow.get(5);
            String restorationAction = (String)currRow.get(6);
            
            if(impactStartTime == null || isDefaultDate(impactStartTime)){
                return false;
            }
            if(impactEndTime == null || isDefaultDate(impactEndTime)){
                return false;
            }
            if(businessImpact == null || EMPTY_STR.equals(businessImpact.trim())){
                return false;
            }
            
            if(restorationAction == null || EMPTY_STR.equals(restorationAction.trim())){
                return false;
            }
            
        }        
        return true;
    }
    
    private boolean saveAllCaseCloseDetails(ClarifyDatabaseQueryHelper queryhelper, Vector<Object> caseCloseDataVector) {
        int size = caseCloseDataVector.size();
        
        for (int i = 0; i < size; i++) {
            Vector currRow = (Vector)caseCloseDataVector.get(i);
            
            System.out.print(currRow);
            
            String caseId = (String)currRow.get(0);
            Date impactStartTime = (Date)currRow.get(3); // 
            Date impactEndTime = (Date)currRow.get(4);
            String businessImpact = (String)currRow.get(5);
            String restorationAction = (String)currRow.get(6);
            
            if(impactStartTime == null || isDefaultDate(impactStartTime)){
                continue;
            }
            if(impactEndTime == null || isDefaultDate(impactEndTime)){
                continue;
            }
            if(businessImpact == null || EMPTY_STR.equals(businessImpact.trim())){
                continue;
            }
            
            if(restorationAction == null || EMPTY_STR.equals(restorationAction.trim())){
                continue;
            }
            
            boolean success = queryhelper.saveSingleCaseCloseDetails(caseId,impactStartTime,impactEndTime,businessImpact,restorationAction);
            
        }        
        return true;
    }
    
    private void btnSaveDataCloseCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDataCloseCaseActionPerformed
        
        // Perform the validation for the input
        // If all Input fine, then call parentFrame.setIncidentCaseInputDone(true);
        // otherwise popup validation message
        
        //tblCaseCloseInput.getCellEditor().stopCellEditing();
        
        CaseCloseTableModel tableModel = (CaseCloseTableModel)tblCaseCloseInput.getModel();
        Vector<Object> caseCloseDataVector = tableModel.getDataVector();
        
        boolean saveSuccessful = saveAllCaseCloseDetails(queryhelper, caseCloseDataVector);
        
        boolean allMandatoryPopulated = performDataMandatoryCheck(caseCloseDataVector);
        
        //System.out.println(allMandatoryPopulated);
        
        if(allMandatoryPopulated){
            parentFrame.setIncidentCaseInputDone(true);
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(this, "Please fill all mandatory fields and try again");
            parentFrame.setIncidentCaseInputDone(false);
        }
    }//GEN-LAST:event_btnSaveDataCloseCaseActionPerformed

    private void checkBeforeClosure(){
        int result = JOptionPane.showConfirmDialog(
            this,"Are you sure you want to cancel mandatory data capture for Incident cases?","Confirm closure",
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION){
            parentFrame.setIncidentCaseInputDone(false);
            this.dispose();
        }
    }
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        checkBeforeClosure();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        checkBeforeClosure();
    }//GEN-LAST:event_formWindowClosing

    private void btnSaveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDataActionPerformed
        
        //tblCaseCloseInput.getCellEditor().stopCellEditing();
        
        CaseCloseTableModel tableModel = (CaseCloseTableModel)tblCaseCloseInput.getModel();
        Vector<Object> caseCloseDataVector = tableModel.getDataVector();
        
        boolean saveSuccessful = saveAllCaseCloseDetails(queryhelper, caseCloseDataVector);
        
        if(saveSuccessful){
            JOptionPane.showMessageDialog(this, "Data saved successfully. [Note: Rows with incomplete data will not be saved]");
        }
    }//GEN-LAST:event_btnSaveDataActionPerformed

    private void chkAutoUpdateImpactStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAutoUpdateImpactStartActionPerformed
        if(chkAutoUpdateImpactStart.isSelected()){
            CaseCloseTableModel tableModel = (CaseCloseTableModel)tblCaseCloseInput.getModel();
            Vector<Object> caseCloseDataVector = tableModel.getDataVector();
            
             int size = caseCloseDataVector.size();
        
            for (int i = 0; i < size; i++) {
                Vector currRow = (Vector)caseCloseDataVector.get(i);

                Date creationTime = (Date)currRow.get(2);
                
                if(creationTime == null || isDefaultDate(creationTime)){
                    continue;
                }
                tableModel.setValueAt(creationTime, i, 3);
            }           
        }
    }//GEN-LAST:event_chkAutoUpdateImpactStartActionPerformed

    private void chkAutoUpdateImpactEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAutoUpdateImpactEndActionPerformed
         if(chkAutoUpdateImpactEnd.isSelected()){
            CaseCloseTableModel tableModel = (CaseCloseTableModel)tblCaseCloseInput.getModel();
            Vector<Object> caseCloseDataVector = tableModel.getDataVector();
            
            int size = caseCloseDataVector.size();
            Date currentDt = new GregorianCalendar().getTime();
            for (int i = 0; i < size; i++) {
                tableModel.setValueAt(currentDt, i, 4);
            }
            
        }
    }//GEN-LAST:event_chkAutoUpdateImpactEndActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
       /* try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaseCloseInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaseCloseInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaseCloseInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaseCloseInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /*
         * Create and display the dialog
         */
       /* java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ArrayList<CaseCloseDt> test = new ArrayList<CaseCloseDt>();
                CaseCloseInputDialog dialog = new CaseCloseInputDialog(new javax.swing.JFrame(), true,test);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSaveData;
    private javax.swing.JButton btnSaveDataCloseCase;
    private javax.swing.JCheckBox chkAutoUpdateImpactEnd;
    private javax.swing.JCheckBox chkAutoUpdateImpactStart;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTable tblCaseCloseInput;
    private javax.swing.JTextField txtTotalCount;
    // End of variables declaration//GEN-END:variables

    
    private String[] getCaseCloseHeaders() {
		return new String [] {
                    "Case Id", "Title", "Creation Time","Impact Start Time", "Impact End Time", "Business Impact", "Restoration Action"};
    }
    
    private void loadCaseDataForClosure() {
        txtTotalCount.setEditable(false);
        
        ArrayList<CaseCloseDt> eligibleIncidentCases = getEligibleIncidentCases();
        
        ArrayList<CaseCloseDt> caseCloseDetails = queryhelper.getCaseDetailForClosure(eligibleIncidentCases);
               
        Object [][] caseCloseDetailsArr = convertArrayListToObjectArr(caseCloseDetails);
        
        String [] caseCloseHeaders = getCaseCloseHeaders();
        
        CaseCloseTableModel caseCloseResultsTableModel = new CaseCloseTableModel(caseCloseDetailsArr,caseCloseHeaders);
        tblCaseCloseInput.setModel(caseCloseResultsTableModel);
        txtTotalCount.setText(String.valueOf(caseCloseDetailsArr.length));
        
        TableColumn creationTimeDtColumn = tblCaseCloseInput.getColumnModel().getColumn(2); 
        TableColumn impactStartDtColumn = tblCaseCloseInput.getColumnModel().getColumn(3);  
        TableColumn impactEndDtColumn = tblCaseCloseInput.getColumnModel().getColumn(4);  
        
        creationTimeDtColumn.setCellRenderer(new DateCellRenderer());
        
        impactStartDtColumn.setCellEditor(new DateCellEditor()); 
        impactStartDtColumn.setCellRenderer(new DateCellRenderer());
        
        impactEndDtColumn.setCellEditor(new DateCellEditor()); 
        impactEndDtColumn.setCellRenderer(new DateCellRenderer());
        
        JTableHeader header = tblCaseCloseInput.getTableHeader();
        header.setReorderingAllowed(false);
        
        setColumnWidth();
    }
    
   private void setColumnWidth() {
        TableColumnModel columnModel = tblCaseCloseInput.getColumnModel();
                
        TableColumn column = columnModel.getColumn(0);
        column.setPreferredWidth(10); //Case Id
        column = columnModel.getColumn(1);
        column.setPreferredWidth(300); //Title
      
    }
    
    private Object[][] convertArrayListToObjectArr(ArrayList<CaseCloseDt> caseList) {
		int size = caseList.size();
		Object [][] caseListArr = new Object[size][CASE_CLOSE_COLUMNS_COUNT];

		int j=0;

		for(int i=0;i<size;i++){
			CaseCloseDt caseCloseDt = caseList.get(i);
			caseListArr[i][j]= caseCloseDt.getCaseId();
			j++;
			caseListArr[i][j]= caseCloseDt.getCaseTitle();
			j++;
                        caseListArr[i][j]= caseCloseDt.getCreationTime(); // Newly added
			j++;
			caseListArr[i][j]= caseCloseDt.getImpactStartTime();
			j++;
			caseListArr[i][j]= caseCloseDt.getImpactEndTime();
			j++;
			caseListArr[i][j]= caseCloseDt.getBusinessImpact();
			j++;
			caseListArr[i][j]= caseCloseDt.getRestorationAction();
			j=0;
		}

		return caseListArr;
	}

    private void initCustomComponents() {
        tblCaseCloseInput.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    }

}
