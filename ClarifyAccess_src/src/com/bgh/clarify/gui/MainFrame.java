/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bgh.clarify.gui;

import com.bgh.clarify.db.ClarifyDatabaseQueryHelper;
import com.bgh.clarify.dt.*;
import com.bgh.clarify.gui.util.CaseDefaultTableModel;
import com.bgh.clarify.gui.util.DateCellRenderer;
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author BASTING
 */
public class MainFrame extends javax.swing.JFrame{

    class RowListener implements ListSelectionListener {

        public RowListener(MainFrame aThis) {
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            txtSelCount.setText(String.valueOf(tblCase.getSelectedRows().length));
        }
    }

    private final String WG = "WG";
    private final String WIPBIN = "WIPBIN";
    private final String QUEUE = "QUEUE";

    private final String CASE_TYPE_INCIDENT = "Incident";
    private final String CASE_STS_PENDING_CLOSE = "Pending Close";
    
    private final String CASE_CONDITION_OPEN_DISPATCH = "Open-Dispatch";
    
    
    private ClarifyDatabaseQueryHelper queryhelper;

    private String username;

    private boolean incidentCaseInputDone;
    
    private boolean inputDoneForChangeStatus;

    private ArrayList<CaseChangeStatusDt> masterDataForStatusChange;
    
    private Vector<Object> selectedDataForStatusChange;
    
    private String getUsername() {
        return username;
    }

    public void setMasterDataForStatusChange(ArrayList<CaseChangeStatusDt> eligibleCaseTypesWithValidNextStatusValues) {
        this.masterDataForStatusChange = eligibleCaseTypesWithValidNextStatusValues;
    }
    
    public void setSelectedDataForStatusChange(Vector<Object> caseChangeStatusDataVector) {
        this.selectedDataForStatusChange = caseChangeStatusDataVector;
    }
    
    private boolean isIncidentCaseInputDone() {
        return incidentCaseInputDone;
    }

    public void setIncidentCaseInputDone(boolean incidentCaseInputDoneL) {
        this.incidentCaseInputDone = incidentCaseInputDoneL;
    }
    
    void setInputDoneForChangeStatus(boolean inputDoneForChangeStatusL) {
        this.inputDoneForChangeStatus = inputDoneForChangeStatusL;
    }
    
    private boolean isInputDoneForChangeStatus() {
        return inputDoneForChangeStatus;
    }
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();        
    }
    
    public void init(String userNameInput){
        this.username = userNameInput;
        initComponentsCustom();
        populateCaseListBasedOnOption(username);    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpCaseFilter = new javax.swing.ButtonGroup();
        popupMnuDetails = new javax.swing.JPopupMenu();
        popupMnuItmAccept = new javax.swing.JMenuItem();
        popupMnuItmChgSts = new javax.swing.JMenuItem();
        popupMnuItmCloseCase = new javax.swing.JMenuItem();
        pnlMain = new javax.swing.JPanel();
        pnlFilter = new javax.swing.JPanel();
        rbWGCases = new javax.swing.JRadioButton();
        rbWIPBINCases = new javax.swing.JRadioButton();
        rbQueueCases = new javax.swing.JRadioButton();
        btnSearch = new javax.swing.JButton();
        lblUserDesc = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        pnlCases = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnAccept = new javax.swing.JButton();
        btnChangeStatus = new javax.swing.JButton();
        btnCloseCase = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTotalCount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSelCount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCase = new javax.swing.JTable();
        mnuMain = new javax.swing.JMenuBar();
        mnuApp = new javax.swing.JMenu();
        mnuItmExit = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mnuItmAbout = new javax.swing.JMenuItem();

        popupMnuDetails.setComponentPopupMenu(popupMnuDetails);

        popupMnuItmAccept.setText("Accept");
        popupMnuItmAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupMnuItmAcceptActionPerformed(evt);
            }
        });
        popupMnuDetails.add(popupMnuItmAccept);

        popupMnuItmChgSts.setText("Change Status");
        popupMnuItmChgSts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupMnuItmChgStsActionPerformed(evt);
            }
        });
        popupMnuDetails.add(popupMnuItmChgSts);

        popupMnuItmCloseCase.setText("Close case");
        popupMnuItmCloseCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupMnuItmCloseCaseActionPerformed(evt);
            }
        });
        popupMnuDetails.add(popupMnuItmCloseCase);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Clarify Easy Access");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                ClarifyWindowListener(evt);
            }
        });

        pnlMain.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));

        pnlFilter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnGrpCaseFilter.add(rbWGCases);
        rbWGCases.setSelected(true);
        rbWGCases.setText("Workgroup cases");
        rbWGCases.setActionCommand("WG");

        btnGrpCaseFilter.add(rbWIPBINCases);
        rbWIPBINCases.setText("WIPBIN cases");
        rbWIPBINCases.setActionCommand("WIPBIN");

        btnGrpCaseFilter.add(rbQueueCases);
        rbQueueCases.setText("Queue cases");
        rbQueueCases.setActionCommand("QUEUE");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblUserDesc.setText("Clarify Access for user:");

        lblUsername.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(0, 51, 255));
        lblUsername.setText(" ");

        javax.swing.GroupLayout pnlFilterLayout = new javax.swing.GroupLayout(pnlFilter);
        pnlFilter.setLayout(pnlFilterLayout);
        pnlFilterLayout.setHorizontalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUserDesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbWGCases)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbQueueCases)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbWIPBINCases)
                .addGap(18, 18, 18)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlFilterLayout.setVerticalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbWIPBINCases, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbQueueCases, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbWGCases, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUserDesc)
                        .addComponent(lblUsername)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCases.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnChangeStatus.setText("Change Status");
        btnChangeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStatusActionPerformed(evt);
            }
        });

        btnCloseCase.setText("Close case");
        btnCloseCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseCaseActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Count:");

        jLabel2.setText("Selected Count:");

        txtSelCount.setText("0");

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSelCount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 313, Short.MAX_VALUE)
                .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChangeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCloseCase))
        );

        pnlButtonsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnChangeStatus, btnCloseCase});

        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccept)
                    .addComponent(btnChangeStatus)
                    .addComponent(btnCloseCase)
                    .addComponent(txtSelCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tblCase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCase.setComponentPopupMenu(popupMnuDetails);
        tblCase.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(tblCase);

        javax.swing.GroupLayout pnlCasesLayout = new javax.swing.GroupLayout(pnlCases);
        pnlCases.setLayout(pnlCasesLayout);
        pnlCasesLayout.setHorizontalGroup(
            pnlCasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCasesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnlCasesLayout.setVerticalGroup(
            pnlCasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCasesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCases, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(pnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCases, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        mnuApp.setText("Application");

        mnuItmExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mnuItmExit.setText("Exit");
        mnuItmExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmExitActionPerformed(evt);
            }
        });
        mnuApp.add(mnuItmExit);

        mnuMain.add(mnuApp);

        mnuHelp.setText("Help");

        mnuItmAbout.setText("About");
        mnuItmAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmAboutActionPerformed(evt);
            }
        });
        mnuHelp.add(mnuItmAbout);

        mnuMain.add(mnuHelp);

        setJMenuBar(mnuMain);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-923)/2, (screenSize.height-686)/2, 923, 686);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        populateCaseListBasedOnOption(username);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void mnuItmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmExitActionPerformed
        checkBeforeClosingApp();
    }//GEN-LAST:event_mnuItmExitActionPerformed

    private void ClarifyWindowListener(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_ClarifyWindowListener
        checkBeforeClosingApp();
    }//GEN-LAST:event_ClarifyWindowListener

    private void performAcceptAction() {
        //CaseDefaultTableModel caseResultsTableModel = (CaseDefaultTableModel)tblCase.getModel();
        int [] selectedRows = tblCase.getSelectedRows();
        if (selectedRows.length < 1) {
            JOptionPane.showMessageDialog(this, "Please select atleast one row");
            return;
        }
        ArrayList<String> selectedCases = new ArrayList <String>();
        ArrayList<String> eligibleCases = new ArrayList <String>();
        int selectedRow;
        for(int idx=0;idx<selectedRows.length;idx++){
            selectedRow = selectedRows[idx];
            /*String caseId = (String)caseResultsTableModel.getValueAt(selectedRow, 0);
            String condition = (String)caseResultsTableModel.getValueAt(selectedRow, 2); */
            
            String caseId = (String)tblCase.getValueAt(selectedRow, 0);
            String condition = (String)tblCase.getValueAt(selectedRow, 2);
            
            selectedCases.add(caseId);
            
            if(CASE_CONDITION_OPEN_DISPATCH.equalsIgnoreCase(condition)){
                eligibleCases.add(caseId);
            }            
        }
        int eligibleCasesCount = eligibleCases.size();
        int selectedCasesCount = selectedCases.size();
        if (eligibleCasesCount < 1) {
            JOptionPane.showMessageDialog(this, "None of the selected cases are eligible. Eligiblity --> 'Open-Dispatch'");
            return;
        }
        queryhelper = getClarifyQueryHelper();
        ArrayList<String> successfullyUpdatedCases = queryhelper.acceptCaseList(eligibleCases, username);
        String msg = "Cases selected for Accept operation (count:"+selectedCasesCount+") = "+selectedCases + "\n";
        String msg2 = "Cases eligible for Accept operation (count:"+eligibleCasesCount+") = "+eligibleCases + "\n";
        String msg3 = "Cases succesfully Accepted (count:"+successfullyUpdatedCases.size()+") = "+successfullyUpdatedCases + "\n";
        CaseOutputDialog dialog = new CaseOutputDialog(this,true,msg+msg2+msg3);
        dialog.setVisible(true);
        populateCaseListBasedOnOption(username);        
    }
    
    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        performAcceptAction();        
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void performCloseCase(){
        //CaseDefaultTableModel caseResultsTableModel = (CaseDefaultTableModel)tblCase.getModel();
        int [] selectedRows = tblCase.getSelectedRows();
        if (selectedRows.length < 1) {
            JOptionPane.showMessageDialog(this, "Please select atleast one row");
            return;
        }
        ArrayList<CaseCloseDt> selectedCases = new ArrayList <CaseCloseDt>();
        int selectedRow;
        for(int idx=0;idx<selectedRows.length;idx++){
            selectedRow = selectedRows[idx];
            /*String caseId = (String)caseResultsTableModel.getValueAt(selectedRow, 0);
            String status = (String)caseResultsTableModel.getValueAt(selectedRow, 3);
            String caseType = (String)caseResultsTableModel.getValueAt(selectedRow, 11);
            String condition = (String)caseResultsTableModel.getValueAt(selectedRow, 2);*/
            
            String caseId = (String)tblCase.getValueAt(selectedRow, 0);
            String status = (String)tblCase.getValueAt(selectedRow, 3);
            String caseType = (String)tblCase.getValueAt(selectedRow, 11);
            String condition = (String)tblCase.getValueAt(selectedRow, 2);
            
            CaseCloseDt closeDt = new CaseCloseDt();
            closeDt.setCaseId(caseId);
            closeDt.setCaseType(caseType);
            closeDt.setStatus(status);
            closeDt.setCondition(condition);
            selectedCases.add(closeDt);
        }
        ArrayList<CaseCloseDt> eligibleNonIncidentCases = new ArrayList <CaseCloseDt>();
        ArrayList<CaseCloseDt> eligibleIncidentCases = new ArrayList <CaseCloseDt>();
        for (Iterator<CaseCloseDt> it = selectedCases.iterator(); it.hasNext();) {
            CaseCloseDt caseCloseDt = it.next();
            
            String status = caseCloseDt.getStatus();
            String caseType =  caseCloseDt.getCaseType();
            String condition = caseCloseDt.getCondition();
            
            if(!CASE_CONDITION_OPEN_DISPATCH.equalsIgnoreCase(condition)){
                if(CASE_STS_PENDING_CLOSE.equalsIgnoreCase(status) && 
                            !CASE_TYPE_INCIDENT.equalsIgnoreCase(caseType)){
                    eligibleNonIncidentCases.add(caseCloseDt);
                }else if(CASE_STS_PENDING_CLOSE.equalsIgnoreCase(status) && 
                        CASE_TYPE_INCIDENT.equalsIgnoreCase(caseType)){
                    eligibleIncidentCases.add(caseCloseDt);
                }     
            }
        }
        int eligibleIncidentCasesSize = eligibleIncidentCases.size();
        int eligibleNonIncidentCasesSize = eligibleNonIncidentCases.size();
        if (eligibleNonIncidentCasesSize < 1 && eligibleIncidentCasesSize < 1) {
            JOptionPane.showMessageDialog(this, "None of the selected cases are eligible. Eligiblity --> 'Pending Close' and Not 'Open-Dispatch'");
            return;
        }
        queryhelper = getClarifyQueryHelper();
        if (eligibleIncidentCasesSize > 0) {
            CaseCloseInputDialog caseCloseDialog = new CaseCloseInputDialog(this,true,eligibleIncidentCases, queryhelper);
            caseCloseDialog.setVisible(true);
            if (!isIncidentCaseInputDone()) {
                JOptionPane.showMessageDialog(this, "Mandatory input capture for Incident cases cancelled.. Case closure will not continue");
                return;
            }
        }
        ArrayList<CaseCloseDt> casesSendForClosure = new ArrayList<CaseCloseDt>(eligibleIncidentCasesSize+eligibleNonIncidentCasesSize);
        casesSendForClosure.addAll(eligibleNonIncidentCases);
        casesSendForClosure.addAll(eligibleIncidentCases);
        ArrayList<CaseCloseDt> successfullyClosedCases = queryhelper.closeCaseList(casesSendForClosure);
        String msg = "Cases selected for Close operation (count:"+selectedCases.size()+") = "+selectedCases + "\n";
        String msg2 = "Cases eligible for Close operation (count:"+casesSendForClosure.size()+") = "+casesSendForClosure + "\n";
        String msg3 = "Cases successfully closed (count:"+successfullyClosedCases.size()+") = "+successfullyClosedCases + "\n";
        CaseOutputDialog dialog = new CaseOutputDialog(this,true,msg+msg2+msg3);
        dialog.setVisible(true);
        populateCaseListBasedOnOption(username);        
    }
    
    private void btnCloseCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseCaseActionPerformed
        performCloseCase();        
    }//GEN-LAST:event_btnCloseCaseActionPerformed
    
    private void performChangeStatus(){
        //CaseDefaultTableModel caseResultsTableModel = (CaseDefaultTableModel)tblCase.getModel();
        int [] selectedRows = tblCase.getSelectedRows();
        if (selectedRows.length < 1) {
            JOptionPane.showMessageDialog(this, "Please select atleast one row");
            return;
        }
        ArrayList<CaseChangeStatusDt> selectedCaseTypes = new ArrayList <CaseChangeStatusDt>();
        ArrayList<CaseSimpleDt> eligibleCases = new ArrayList <CaseSimpleDt>();
        int selectedRow;
        queryhelper = getClarifyQueryHelper();
        for(int idx=0;idx<selectedRows.length;idx++){
            selectedRow = selectedRows[idx];
            /*
            String caseId = (String)caseResultsTableModel.getValueAt(selectedRow, 0);
            String fromStatus = (String)caseResultsTableModel.getValueAt(selectedRow, 3);
            String caseType = (String)caseResultsTableModel.getValueAt(selectedRow, 11);
            String condition = (String)caseResultsTableModel.getValueAt(selectedRow, 2);*/
            
            String caseId = (String)tblCase.getValueAt(selectedRow, 0);
            String fromStatus = (String)tblCase.getValueAt(selectedRow, 3);
            String caseType = (String)tblCase.getValueAt(selectedRow, 11);
            String condition = (String)tblCase.getValueAt(selectedRow, 2);
            
            if(!CASE_CONDITION_OPEN_DISPATCH.equalsIgnoreCase(condition) && !CASE_STS_PENDING_CLOSE.equalsIgnoreCase(fromStatus)){
                
                CaseChangeStatusDt changeStsDt = new CaseChangeStatusDt();
                changeStsDt.setCaseType(caseType);
                changeStsDt.setCurrentStatus(fromStatus);
                
                CaseSimpleDt caseDt = new CaseSimpleDt();
                caseDt.setCaseId(caseId);
                caseDt.setType(caseType);
                caseDt.setCurrentStatus(fromStatus);
                eligibleCases.add(caseDt);
                
                if(!selectedCaseTypes.contains(changeStsDt)){
                    String fromStatusObjid = queryhelper.getCurrentStatusObjid(caseId); // querying only if not found locally
                    changeStsDt.setCurrentStatusObjid(fromStatusObjid); // setting the queried value
                    selectedCaseTypes.add(changeStsDt);
                }
            }
        }
        int selectedCaseTypesSize = selectedCaseTypes.size();
        if (selectedCaseTypesSize < 1) {
            JOptionPane.showMessageDialog(this, "None of the selected cases are eligible for Change status. "
                    + " Eligiblity --> Not 'Open-Dispatch' and Not 'Pending Close'");
            return;
        }
        CaseChangeStatusInputDialog caseChangeStatusDialog = new CaseChangeStatusInputDialog(this,true,selectedCaseTypes, queryhelper, username);
        caseChangeStatusDialog.setVisible(true);
        System.out.println("isInputDoneForChangeStatus: "+isInputDoneForChangeStatus());
        System.out.println("masterDataForStatusChange: "+masterDataForStatusChange);
        System.out.println("selectedDataForStatusChange: "+selectedDataForStatusChange);
        if (!isInputDoneForChangeStatus()) {
            System.out.println("Nothing to do, required input is not done");
            return;
        }
        if (masterDataForStatusChange == null || selectedDataForStatusChange == null) {
            JOptionPane.showMessageDialog(this, "Invalid Input, Change Status will not be done..");
            System.out.println("Nothing to do, as the required input passed from change status screen is null");
            return;
        }
        HashMap<CaseTypeStatusDt,String> statusMap = prepareHashmapForStatusMapping(selectedDataForStatusChange);
        //System.out.println(statusMap);
        populateCasesWithNewStatus(eligibleCases,statusMap,masterDataForStatusChange);
        ArrayList<CaseSimpleDt> successCases = queryhelper.changeStatusForCaseList(eligibleCases);
        String msg2 = "Cases eligible for change status operation (count:"+eligibleCases.size()+") = "+eligibleCases + "\n";
        String msg3 = "Cases successfully changed status (count:"+successCases.size()+") = "+successCases + "\n";
        CaseOutputDialog dialog = new CaseOutputDialog(this,true,msg2+msg3);
        dialog.setVisible(true);
        populateCaseListBasedOnOption(username);        
    }
    
    private void btnChangeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStatusActionPerformed
        performChangeStatus();        
    }//GEN-LAST:event_btnChangeStatusActionPerformed

    private void mnuItmAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmAboutActionPerformed
        new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_mnuItmAboutActionPerformed

    private void popupMnuItmAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupMnuItmAcceptActionPerformed
        performAcceptAction();
    }//GEN-LAST:event_popupMnuItmAcceptActionPerformed

    private void popupMnuItmChgStsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupMnuItmChgStsActionPerformed
        performChangeStatus();        
    }//GEN-LAST:event_popupMnuItmChgStsActionPerformed

    private void popupMnuItmCloseCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupMnuItmCloseCaseActionPerformed
        performCloseCase();        
    }//GEN-LAST:event_popupMnuItmCloseCaseActionPerformed

    private void populateCasesWithNewStatus(ArrayList<CaseSimpleDt> eligibleCases, HashMap<CaseTypeStatusDt, String> statusMap, ArrayList<CaseChangeStatusDt> masterDataForStatusChange) {
        int caseSize = eligibleCases.size();
        
        for (int i = 0; i < caseSize; i++) {
            CaseSimpleDt caseDt = eligibleCases.get(i);
            String type = caseDt.getType();
            String currentStatus = caseDt.getCurrentStatus();
            
            CaseSingleStatusDt newStatusDt = getNewStatus(type, currentStatus, statusMap, masterDataForStatusChange);
            
            if(newStatusDt == null){
                continue;
            }
            caseDt.setNewStatus(newStatusDt);
        }        
    }
    
    
    private CaseSingleStatusDt getNewStatus(String type, String currentStatus, HashMap<CaseTypeStatusDt, String> statusMap, ArrayList<CaseChangeStatusDt> masterDataForStatusChange) {
        CaseTypeStatusDt typeStatusDtTemp = new CaseTypeStatusDt();
        typeStatusDtTemp.setType(type);
        typeStatusDtTemp.setStatus(currentStatus);
        
        String newStatus = statusMap.get(typeStatusDtTemp);
        
        CaseChangeStatusDt changeStatusDtTemp = new CaseChangeStatusDt();
        changeStatusDtTemp.setCaseType(type);
        changeStatusDtTemp.setCurrentStatus(currentStatus);
                
        int foundIndexMasterData = masterDataForStatusChange.indexOf(changeStatusDtTemp);
        
        if(foundIndexMasterData == -1){
            return null;
        }
        
        ArrayList<CaseSingleStatusDt> newStatusList = masterDataForStatusChange.get(foundIndexMasterData).getNewStatusList();
        
        CaseSingleStatusDt singleStatusDtTemp = new CaseSingleStatusDt();
        singleStatusDtTemp.setStatus(newStatus);
        
        int foundIndexNewStatus = newStatusList.indexOf(singleStatusDtTemp);
        
        if(foundIndexNewStatus == -1){
            return null;
        }
        
        return newStatusList.get(foundIndexNewStatus);
    }
    
    private HashMap<CaseTypeStatusDt,String> prepareHashmapForStatusMapping(Vector<Object> selectedDataForStatusChange) {
        HashMap<CaseTypeStatusDt,String> statusMapping = new HashMap<CaseTypeStatusDt, String>();
        
        int size = selectedDataForStatusChange.size();
        for (int i = 0; i < size; i++) {
            Vector currRow = (Vector)selectedDataForStatusChange.get(i);
            String type = (String)currRow.get(0);
            String currStatus = (String)currRow.get(1);
            String nextStatus = (String)currRow.get(2);
            
            CaseTypeStatusDt typeStatusDtTemp = new CaseTypeStatusDt();
            typeStatusDtTemp.setType(type);
            typeStatusDtTemp.setStatus(currStatus);
            
            statusMapping.put(typeStatusDtTemp, nextStatus);
        }     
        
        return statusMapping;
    }
    
    private void checkBeforeClosingApp(){
         int result = JOptionPane.showConfirmDialog(
            this,"Are you sure you want to exit the application?","Exit Application",
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION){
            queryhelper.closeJdbcConnection();
            System.exit(0);
        }
    }

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
       // try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
       /*     javax.swing.UIManager.setLookAndFeel("com.jgoodies.looks.plastic.Plastic3DLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } */
        //</editor-fold>

        /*
         * Create and display the form
         */
     /*   java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainFrame mainFrame = new MainFrame();
                mainFrame.init("BastinGomez");
                mainFrame.setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnChangeStatus;
    private javax.swing.JButton btnCloseCase;
    private javax.swing.ButtonGroup btnGrpCaseFilter;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblUserDesc;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JMenu mnuApp;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenuItem mnuItmAbout;
    private javax.swing.JMenuItem mnuItmExit;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlCases;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPopupMenu popupMnuDetails;
    private javax.swing.JMenuItem popupMnuItmAccept;
    private javax.swing.JMenuItem popupMnuItmChgSts;
    private javax.swing.JMenuItem popupMnuItmCloseCase;
    private javax.swing.JRadioButton rbQueueCases;
    private javax.swing.JRadioButton rbWGCases;
    private javax.swing.JRadioButton rbWIPBINCases;
    private javax.swing.JTable tblCase;
    private javax.swing.JTextField txtSelCount;
    private javax.swing.JTextField txtTotalCount;
    // End of variables declaration//GEN-END:variables


    private void populateCaseListBasedOnOption(String loginName){
        
        if(loginName == null){
            return;
        }
        
        ButtonModel buttonModel = btnGrpCaseFilter.getSelection();
        String actionCommand = buttonModel.getActionCommand();
        if(WG.equalsIgnoreCase(actionCommand)){
            setDataFromDBForTableDataModelForWG(loginName);
        }else if(WIPBIN.equalsIgnoreCase(actionCommand)){
            JOptionPane.showMessageDialog(this, "WIPBIN Query.. work in progress..");
            rbWGCases.setSelected(true);
        }else if(QUEUE.equalsIgnoreCase(actionCommand)){
            JOptionPane.showMessageDialog(this, "QUEUE Query.. work in progress..");
            rbWGCases.setSelected(true);
        }
    }

    /*private void setDefaultTableDataModelForWG() {

        String [] caseHeader = getCaseHeaders();
        String [][] caseList =  {{}};
	TableModel caseResultsTableModel = new DefaultTableModel(caseList,caseHeader);
        tblCase.setModel(caseResultsTableModel);
    }*/

     private void setDataFromDBForTableDataModelForWG(String loginName) {

        String [] caseHeader = getCaseHeaders();
        Object [][] caseList =  getCaseList(loginName);

        CaseDefaultTableModel caseResultsTableModel = new CaseDefaultTableModel(caseList,caseHeader);
        
        // Obtain the row sort and its sort keys for setting it later
        DefaultRowSorter sorter = (DefaultRowSorter)tblCase.getRowSorter();
        List<RowSorter.SortKey> sortKeys = null;
        if(sorter != null){
            sortKeys = sorter.getSortKeys();
        }
        
        tblCase.setModel(caseResultsTableModel);
        txtTotalCount.setText(String.valueOf(caseList.length));

        TableColumn creationTimeCol = tblCase.getColumnModel().getColumn(8);  //creation time
        TableColumn lastModifiedCol = tblCase.getColumnModel().getColumn(9);   // last modified
        creationTimeCol.setCellRenderer(new DateCellRenderer());
        lastModifiedCol.setCellRenderer(new DateCellRenderer());
        
        ListSelectionModel selectionModel = tblCase.getSelectionModel();
        selectionModel.addListSelectionListener(new RowListener(this));

        JTableHeader header = tblCase.getTableHeader();
        header.setReorderingAllowed(false);
        //addMouseListenerToHeader(header); // No need of mouse listener, just write the one line, see below:
        tblCase.setAutoCreateRowSorter(true);
        
        // set the sort keys from the earlier search before refresh
        if(sortKeys != null){
            sorter = (DefaultRowSorter)tblCase.getRowSorter();
            sorter.setSortKeys(sortKeys);
        }
        
        setColumnWidth();
        
     }

     private void setColumnWidth() {
        TableColumnModel columnModel = tblCase.getColumnModel();
                
        TableColumn column = columnModel.getColumn(0);
        column.setPreferredWidth(60); //Case Id
        column = columnModel.getColumn(1);
        column.setPreferredWidth(450); //Title
        column = columnModel.getColumn(2);
        column.setPreferredWidth(120); //Condition
        column = columnModel.getColumn(3);
        column.setPreferredWidth(120); //Status
        column = columnModel.getColumn(4);
        column.setPreferredWidth(60); //priority
        column = columnModel.getColumn(6);
        column.setPreferredWidth(60); //stage
        column = columnModel.getColumn(7);
        column.setPreferredWidth(50); //stage
        column = columnModel.getColumn(8);
        column.setPreferredWidth(120); //creation time
        column = columnModel.getColumn(9);
        column.setPreferredWidth(120); //last modified
        
        //"Case Id", "Title", "Condition",
        //        "Status", "Priority", "WG",
        //        "Stage Discovered", "Environment",
        //        "Creation Time", "Last Modified", "Owner", "Type"
        
    }
     
     /*private void addMouseListenerToHeader(JTableHeader header){
         header.addMouseListener(new MouseAdapter(){

             public void mouseClicked(MouseEvent evt) {
                JTableHeader h = (JTableHeader)evt.getSource() ;
                int nColumn = h.columnAtPoint(evt.getPoint());

                System.out.println("Column selected:" + nColumn);

                if (nColumn != -1) {
                    sortColumn(nColumn, h.getTable().getModel(),h.getTable());
                }
             }

             private void sortColumn(int nColumn, TableModel model, JTable table){
                 JOptionPane.showMessageDialog(table, "Sorting is work-in-progress.. It will come soon :-)");
             }
        });
     }*/

     private Object[][] getCaseList(String loginName) {
		queryhelper = getClarifyQueryHelper();
		return queryhelper.getCaseList(loginName);
		//return new String[][]{{"1","2","3"},
		//		{"1","2","3"}};

	}
	private String[] getCaseHeaders() {
		return new String [] {
                "Case Id", "Title", "Condition",
                "Status", "Priority", "WG",
                "Stage Discovered", "Environment",
                "Creation Time", "Last Modified", "Owner", "Type"
            };
	}

    private void initComponentsCustom() {
        txtTotalCount.setEditable(false);
        txtSelCount.setEditable(false);
        lblUsername.setText(getUsername());
        this.getRootPane().setDefaultButton(btnSearch);

        //ImageIcon imgIcon = new ImageIcon("Amdocs_CRM.jpg");


        BufferedImage image = null;
        try {
            image = ImageIO.read(this.getClass().getResource("/Amdocs_CRM.jpg"));
        } catch (IOException e) {
            System.out.print(e);
        } catch(Exception e){
            System.out.print(e);
        }
        if(image != null){
            this.setIconImage(image);
        }
    }

    public ClarifyDatabaseQueryHelper getClarifyQueryHelper(){
        if(queryhelper != null){
            return queryhelper;
        }
        queryhelper = new ClarifyDatabaseQueryHelper();
        return queryhelper;
    }    
}
